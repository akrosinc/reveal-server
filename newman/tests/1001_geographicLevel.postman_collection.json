{
	"info": {
		"_postman_id": "0549359e-9900-42d2-86da-6fb54c6f936e",
		"name": "1001_geographicLevel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "test actuator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.status).to.eql(\"UP\");",
							"  pm.expect(jsonData.components.db.status).to.eql(\"UP\");",
							"  pm.expect(jsonData.components.ping.status).to.eql(\"UP\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/actuator/health",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"actuator",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"auth_bearer_token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "reveal-web",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{keycloak_URL}}/auth/realms/{{keycloak_realm}}/protocol/openid-connect/token",
					"host": [
						"{{keycloak_URL}}"
					],
					"path": [
						"auth",
						"realms",
						"{{keycloak_realm}}",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"  pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.variables.set(\"geographicLevel_identifier\",jsonData.identifier);",
							"pm.variables.set(\"geographicLevel_name\",jsonData.name);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.unset(\"geographicLevel_identifier\");",
							"pm.variables.unset(\"geographicLevel_name\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"title\": \"title for {{$randomFirstName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "get created geographicLevel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.identifier).to.eql(pm.variables.get(\"geographicLevel_identifier\"));",
							"  pm.expect(jsonData.name).to.eql(pm.variables.get(\"geographicLevel_name\"));",
							"  pm.expect(jsonData.title).to.eql(\"title for \" + pm.variables.get(\"geographicLevel_name\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/{{geographicLevel_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"{{geographicLevel_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get a non-existant geographicLevel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {",
							"  pm.expect(pm.response.code).to.eql(404);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/26a59005-f15f-4964-8d75-b60e99dc5474",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"26a59005-f15f-4964-8d75-b60e99dc5474"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", () => {",
							"  pm.expect(pm.response.code).to.eql(409);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.include(\"Duplicate value for name\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{geographicLevel_name}}\",\n    \"title\": \"title for {{geographicLevel_name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel with bad name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"  pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.include(\"name can only contain [a-z09\\_]\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"abcd efg\",\n    \"title\": \"title for abcd efg\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "update geographicLevel without title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"  pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.include(\"Title is a manditory field\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$geographicLevel_name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/{{geographicLevel_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"{{geographicLevel_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update geographicLevel without name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"  pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.include(\"Name is a manditory field\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{$geographicLevel_name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/{{geographicLevel_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"{{geographicLevel_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update geographicLevel with different name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"  pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.include(\"Name is final and cannot be changed\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$geographicLevel_name}}x\",\n    \"title\": \"title for {{$geographicLevel_name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/{{geographicLevel_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"{{geographicLevel_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update geographicLevel with changing the title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.title).to.eql(\"title for \" + pm.environment.get(\"geographicLevel_name\") + \" 2\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$geographicLevel_name}}\",\n    \"title\": \"title for {{$geographicLevel_name}} 2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/{{geographicLevel_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"{{geographicLevel_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete geographicLevel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {",
							"  pm.expect(pm.response.code).to.eql(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/{{geographicLevel_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"{{geographicLevel_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete geographicLevel again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {",
							"  pm.expect(pm.response.code).to.eql(404);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/{{geographicLevel_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"{{geographicLevel_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update geographicLevel that was deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {",
							"  pm.expect(pm.response.code).to.eql(404);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$geographicLevel_name}}\",\n    \"title\": \"title for {{$geographicLevel_name}} 2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel/{{geographicLevel_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel",
						"{{geographicLevel_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list geographicLevel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData).to.not.contain(pm.variables.get(\"geographicLevel_identifier\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		}
	]
}