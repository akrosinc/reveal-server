{
	"info": {
		"_postman_id": "0c4221bf-fa98-49a1-8c56-ddb67ac16f12",
		"name": "1002_locationHierarchy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "test actuator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.status).to.eql(\"UP\");",
							"  pm.expect(jsonData.components.db.status).to.eql(\"UP\");",
							"  pm.expect(jsonData.components.ping.status).to.eql(\"UP\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/actuator/health",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"actuator",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"auth_bearer_token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "reveal-web",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{keycloak_URL}}/auth/realms/{{keycloak_realm}}/protocol/openid-connect/token",
					"host": [
						"{{keycloak_URL}}"
					],
					"path": [
						"auth",
						"realms",
						"{{keycloak_realm}}",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "create locationHierarchy with bad node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"  pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.contain(\" not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.unset(\"locationHierarchy_identifier\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nodeOrder\": [\"country\", \"pink\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/locationHierarchy",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"locationHierarchy"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel country",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"  pm.expect(pm.response.code).to.oneOf([201,409]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"country\",\n    \"title\": \"Country\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel province",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"  pm.expect(pm.response.code).to.oneOf([201,409]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"province\",\n    \"title\": \"Province\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel district",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"  pm.expect(pm.response.code).to.oneOf([201,409]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"district\",\n    \"title\": \"District\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel catchment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"  pm.expect(pm.response.code).to.oneOf([201,409]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"catchment\",\n    \"title\": \"Health Facility Catchment Area\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel operational",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"  pm.expect(pm.response.code).to.oneOf([201,409]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"operational\",\n    \"title\": \"Operational Area\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "create geographicLevel structure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"  pm.expect(pm.response.code).to.oneOf([201,409]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"structure\",\n    \"title\": \"Structure\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/geographicLevel",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"geographicLevel"
					]
				}
			},
			"response": []
		},
		{
			"name": "create locationHierarchy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"  pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.environment.set(\"locationHierarchy_identifier\",jsonData.identifier);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"locationHierarchy_identifier\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nodeOrder\": [\"country\", \"province\", \"district\", \"catchment\", \"operational\", \"structure\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/locationHierarchy",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"locationHierarchy"
					]
				}
			},
			"response": []
		},
		{
			"name": "create duplicate locationHierarchy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", () => {",
							"  pm.expect(pm.response.code).to.eql(409);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.contain(\" already exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nodeOrder\": [\"country\", \"province\", \"district\", \"catchment\", \"operational\", \"structure\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_url}}/api/v1/locationHierarchy",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"locationHierarchy"
					]
				}
			},
			"response": []
		},
		{
			"name": "get created locationHierarchy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.identifier).to.eql(pm.variables.get(\"geographicLevel_identifier\"));",
							"  pm.expect(jsonData.name).to.eql(pm.variables.get(\"geographicLevel_name\"));",
							"  pm.expect(jsonData.title).to.eql(\"title for \" + pm.variables.get(\"geographicLevel_name\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/locationHierarchy/{{locationHierarchy_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"locationHierarchy",
						"{{locationHierarchy_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get a non-existant locationHierarchy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {",
							"  pm.expect(pm.response.code).to.eql(404);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.contains(\" not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/locationHierarchy/26a59005-f15f-4964-8d75-b60e99dc5474",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"locationHierarchy",
						"26a59005-f15f-4964-8d75-b60e99dc5474"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete locationHierarchy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {",
							"  pm.expect(pm.response.code).to.eql(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/locationHierarchy/{{locationHierarchy_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"locationHierarchy",
						"{{locationHierarchy_identifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete locationHierarchy again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {",
							"  pm.expect(pm.response.code).to.eql(404);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data of the response\", () => {",
							"  pm.expect(jsonData.message).to.contain(\" not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{server_url}}/api/v1/locationHierarchy/{{locationHierarchy_identifier}}",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"api",
						"v1",
						"locationHierarchy",
						"{{locationHierarchy_identifier}}"
					]
				}
			},
			"response": []
		}
	]
}